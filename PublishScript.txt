/*
Deployment script for master

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "master"
:setvar DefaultFilePrefix "master"
:setvar DefaultDataPath "C:\Users\admin\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\mssqllocaldb"
:setvar DefaultLogPath "C:\Users\admin\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\mssqllocaldb"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating [dbo].[CompletedWorks]...';


GO
CREATE TABLE [dbo].[CompletedWorks] (
    [Id]        INT IDENTITY (1, 1) NOT NULL,
    [StudentId] INT NOT NULL,
    [WorkId]    INT NOT NULL,
    [IsChecked] BIT NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Students]...';


GO
CREATE TABLE [dbo].[Students] (
    [Id]        INT           IDENTITY (1, 1) NOT NULL,
    [FirstName] VARCHAR (50)  NOT NULL,
    [LastName]  VARCHAR (50)  NOT NULL,
    [Email]     VARCHAR (MAX) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Works]...';


GO
CREATE TABLE [dbo].[Works] (
    [Id]          INT           IDENTITY (1, 1) NOT NULL,
    [WorkName]    VARCHAR (MAX) NOT NULL,
    [Description] TEXT          NULL,
    [MaxGrade]    INT           NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating unnamed constraint on [dbo].[CompletedWorks]...';


GO
ALTER TABLE [dbo].[CompletedWorks]
    ADD DEFAULT 0 FOR [IsChecked];


GO
PRINT N'Creating unnamed constraint on [dbo].[CompletedWorks]...';


GO
ALTER TABLE [dbo].[CompletedWorks] WITH NOCHECK
    ADD FOREIGN KEY ([StudentId]) REFERENCES [dbo].[Students] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[CompletedWorks]...';


GO
ALTER TABLE [dbo].[CompletedWorks] WITH NOCHECK
    ADD FOREIGN KEY ([WorkId]) REFERENCES [dbo].[Works] ([Id]);


GO
PRINT N'Creating [dbo].[CompletedWorkView]...';


GO
CREATE VIEW [dbo].[CompletedWorkView]
	AS SELECT s.FirstName, s.LastName, w.WorkName FROM [CompletedWorks] co, [Students] s, [Works] w where co.StudentId = s.Id AND co.WorkId = w.Id AND co.IsChecked = 0;
GO
PRINT N'Creating [dbo].[StudentView]...';


GO
CREATE VIEW [dbo].[StudentView]
	AS SELECT FirstName, LastName, Email FROM [Students]
GO
PRINT N'Creating [dbo].[WorkView]...';


GO
CREATE VIEW [dbo].[WorkView]
	AS SELECT WorkName, Description, MaxGrade FROM [Works]
GO
PRINT N'Creating [dbo].[DeleteAllCheckedWorksForStudent]...';


GO
CREATE PROCEDURE [dbo].[DeleteAllCheckedWorksForStudent](@studentId INTEGER, @toDelete INT OUTPUT)
AS SELECT @toDelete = COUNT(*)
	FROM CompletedWorks
	WHERE StudentId = @studentId AND IsChecked = 1
DELETE FROM CompletedWorks
	WHERE StudentId = @studentId AND IsChecked = 1
RETURN 0
GO
PRINT N'Creating [dbo].[SelectAllStudentWorks]...';


GO
CREATE PROCEDURE [dbo].[SelectAllStudentWorks](@studentId INT)
AS SELECT co.Id, w.WorkName, co.IsChecked
	FROM Students AS s 
		INNER JOIN CompletedWorks AS co ON s.Id = co.StudentId
		INNER JOIN Works AS w ON w.Id = co.WorkId
	WHERE s.Id = @studentId
RETURN 0
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

USE [SQLHome];
PRINT('PostDeployment Script')

IF(EXISTS(SELECT * FROM [Students]))
BEGIN
	PRINT N'Create [dbo].[Students]'
	DROP TABLE Students
	CREATE TABLE [dbo].[Students]
	(
		[Id] INT NOT NULL PRIMARY KEY IDENTITY, 
		[FirstName] VARCHAR(50) NULL, 
		[LastName] VARCHAR(50) NULL,
		[Email] VARCHAR(MAX) NOT NULL
	)
	PRINT N'Insert data into [dbo].[Students]'
	INSERT INTO [dbo].[Students] (FirstName, LastName, Email)
	VALUES
		("Igor", "Dyachenko", "igordyacserg@bk.ru"),
		("TestName1", "TestLastName1", "testemail@bk.ru1"),
		("TestNamew", "TestLastName1", "testemail@bk.ru2");
END

IF(EXISTS(SELECT * FROM [Works]))
BEGIN
	PRINT N'Create [dbo].[Works]'
	DROP TABLE Works
	CREATE TABLE [dbo].[Works]
	(
		[Id] INT NOT NULL PRIMARY KEY IDENTITY, 
		[WorkName] VARCHAR(MAX) NOT NULL, 
		[Description] TEXT NULL, 
		[MaxGrade] INT NOT NULL
	)
	PRINT N'Insert data into [dbo].[Works]'
	INSERT INTO [dbo].[Works](WorkName, Description, MaxGrade)
	VALUES
		("work1", "description-1", 100),
		("work2", "description-2", 100),
		("work3", "description-3", 100),
		("work4", "description-4", 10),
		("work5", "description-5", 100);
END

IF(EXISTS(SELECT * FROM [CompletedWorks]))
BEGIN
	PRINT N'Create [dbo].[CompletedWorks]'
	DROP TABLE CompletedWorks
	CREATE TABLE [dbo].[CompletedWorks]
	(
		[Id] INT NOT NULL PRIMARY KEY IDENTITY, 
		[StudentId] INT NOT NULL,
		FOREIGN KEY(StudentId) REFERENCES Students(Id),
		[WorkId] INT NOT NULL, 
		FOREIGN KEY(WorkId) REFERENCES Works(Id),
		[IsChecked] BIT NOT NULL DEFAULT 0
	)
	PRINT N'Insert data into [dbo].[CompletedWorks]'
	INSERT INTO [dbo].[CompletedWorks](StudentId, WorkId, IsChecked)
	VALUES
		( 2, 1, 0),
		( 1, 1, 1),
		( 3, 4, 1),
		( 3, 2, 0),
		( 2, 2, 1);
END
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
CREATE TABLE [#__checkStatus] (
    id           INT            IDENTITY (1, 1) PRIMARY KEY CLUSTERED,
    [Schema]     NVARCHAR (256),
    [Table]      NVARCHAR (256),
    [Constraint] NVARCHAR (256)
);

SET NOCOUNT ON;

DECLARE tableconstraintnames CURSOR LOCAL FORWARD_ONLY
    FOR SELECT SCHEMA_NAME([schema_id]),
               OBJECT_NAME([parent_object_id]),
               [name],
               0
        FROM   [sys].[objects]
        WHERE  [parent_object_id] IN (OBJECT_ID(N'dbo.CompletedWorks'))
               AND [type] IN (N'F', N'C')
                   AND [object_id] IN (SELECT [object_id]
                                       FROM   [sys].[check_constraints]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0
                                       UNION
                                       SELECT [object_id]
                                       FROM   [sys].[foreign_keys]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0);

DECLARE @schemaname AS NVARCHAR (256);

DECLARE @tablename AS NVARCHAR (256);

DECLARE @checkname AS NVARCHAR (256);

DECLARE @is_not_trusted AS INT;

DECLARE @statement AS NVARCHAR (1024);

BEGIN TRY
    OPEN tableconstraintnames;
    FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
    WHILE @@fetch_status = 0
        BEGIN
            PRINT N'Checking constraint: ' + @checkname + N' [' + @schemaname + N'].[' + @tablename + N']';
            SET @statement = N'ALTER TABLE [' + @schemaname + N'].[' + @tablename + N'] WITH ' + CASE @is_not_trusted WHEN 0 THEN N'CHECK' ELSE N'NOCHECK' END + N' CHECK CONSTRAINT [' + @checkname + N']';
            BEGIN TRY
                EXECUTE [sp_executesql] @statement;
            END TRY
            BEGIN CATCH
                INSERT  [#__checkStatus] ([Schema], [Table], [Constraint])
                VALUES                  (@schemaname, @tablename, @checkname);
            END CATCH
            FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
        END
END TRY
BEGIN CATCH
    PRINT ERROR_MESSAGE();
END CATCH

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') >= 0
    CLOSE tableconstraintnames;

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') = -1
    DEALLOCATE tableconstraintnames;

SELECT N'Constraint verification failed:' + [Schema] + N'.' + [Table] + N',' + [Constraint]
FROM   [#__checkStatus];

IF @@ROWCOUNT > 0
    BEGIN
        DROP TABLE [#__checkStatus];
        RAISERROR (N'An error occurred while verifying constraints', 16, 127);
    END

SET NOCOUNT OFF;

DROP TABLE [#__checkStatus];


GO
PRINT N'Update complete.';


GO
